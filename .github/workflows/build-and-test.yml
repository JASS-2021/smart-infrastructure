# build-and-test.yml
# Date started: 30th March 2021
# Date of last update: 31st March 2021

# Purpose:
# Attempts to deploy smart-infrastructure codebase to TUM's Duckie-Town LIFX
# bulbs on push/pull-request to trunk

# By: Ameena Hassan and Julian Christl

# Shout outs to: 
# Paul Schmiedmayer
# Hialus && He Xiaoning

# Developed also by discussions with:
# Timor Morrien
# Ivan Procaccini

# Related documentation can be found at:
# - https://docs.docker.com/engine/reference/commandline/images/
# - https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/

#
# >> Ping Ameena if we forgot you!
#

name: Build and Test # We should make this more accurate, but later on.


# Specifically mentions when to trigger the pipeline #
on:
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk

# Used to store global variables, adapt as necessary. #
env:
  # The name of our Docker image to deploy
  IMAGE_NAME: jass-smart-infrastructure-webservice

# Jobs the pipeline is supposed to run #
jobs:

#  # Job # 1: #
#  test_build:
#    name: Linux test build
#
#    # Setup build environment #
#    container:
#      image: swift:focal
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v2
#
#    # Dependency #
#    - name: Install libsqlite3
#      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
#
#    - uses: actions/cache@v2
#      # Caching to make subsequent deployment faster #
#      with:
#        path: .build
#        key: ${{ runner.os }}-focal-spm-cache-${{ hashFiles('Package.resolved') }}
#
#    - name: Check Swift version
#      # ApodiniLIFX/lifx/main.swift demands swift ver >= 5.3.0
#      run: swift --version
#
#    - name: Build & Test
#      run: swift test --configuration debug --enable-test-discovery

  # Job # 3: #
  build_and_push_to_registry:
    # Only executed after codebase passes all tests #
#    needs: [test_build]

    # Build image and push to GitHub registry if on correct branch #
    name: Build and Push Docker Image # to GitHub Container Registry
    env:
      DOCKER_TARGET_PLATFORM: linux/arm64/v8

    runs-on: ubuntu-latest

    # if this conditional fails, none of the steps are executed #
    if: github.ref == 'refs/heads/trunk'

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/arm64/v8
          push: false
          tags: ${{ env.IMAGE_NAME }}
          labels: "runnumber=${GITHUB_RUN_ID}"
          load: true


  # Job # 5: #     ## DEPLOY ##
  deploy_to_raspberry:
    # Only executed once Docker image is successfully built and pushed to registry #
    needs: [build_and_push_to_registry] #, test_build]


    # Move Docker image from Registry to RPi #
    name: Deploy Docker image to the Raspberry

    runs-on: ubuntu-latest

    # if head is not at trunk, fail before running the steps! #
    if: github.ref == 'refs/heads/trunk'

    steps:

      # Perform deployment via SSH
      - name: Deploy with SSH
        uses: fifsky/ssh-action@v0.0.5
        with:
          # Command to execute on the remote server, i.e. another mess 
          command: |
            # cd into smart-infrastructure directory #
            cd ~/infrastructure
            # log on into docker using github secrets #
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            REGISTRY_ADDR=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

            # Change all uppercase to lowercase to follow convention of repository name
            REGISTRY_ADDR=$(echo $REGISTRY_ADDR | tr '[A-Z]' '[a-z]')

            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

            # Change all uppercase to lowercase to follow convention of image_id
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

            echo REGISTRY_ADDR=$REGISTRY_ADDR

            # Pull the image out of where we stored it
            docker pull $REGISTRY_ADDR

            # -----------------------------------------------------

            # Store the old port and container_id to make sure we can find, stop and rm it
            NGINX_CONFIG_PATH="nginx/conf.d/nginx.conf"
            OLDPORT="$(grep -hnr 'proxy_pass' $NGINX_CONFIG_PATH | sed -r 's/.*?proxy_pass http\:\/\/.+?\:([[:digit:]]+).*/\1/')"
            OLDCID="$(grep -hnr 'proxy_pass' $NGINX_CONFIG_PATH | sed -r 's/.*?proxy_pass http\:\/\/(.+?)\:[[:digit:]]+.*/\1/')"

            echo $OLDCID
            echo $OLDPORT

            # Initialise ISINIT as false.
            ISINIT=false
            # if container hasn't been set up yet, then OLDCID is just IP of localhost.#
            # and then we set ISINIT to true. #
            [ $OLDCID == "127.0.0.1" ] && ISINIT=true

            # Set the old url to be this:
            OLDURL="http://$OLDCID:$OLDPORT"
            # Set the old image to the id of the one container we can
            # find on running docker inspect
            $ISINIT || OLDIMGID=$(docker inspect --format='{{.Image}}' $OLDCID)

            # --------------------------------------------------------
            # CREATE THE NEW CONTAINER'S DETAILS:

            # New port is the one that is not the old port's
            ([ $OLDPORT == "8090" ] && NEWPORT=8092) || NEWPORT=8091
            # New container id is whatever id we get when running the newest image,
            # after syncing up with current container.
            $ISINIT || NEWCID=$(docker run -d -p $NEWPORT:8080 $IMAGE_ID:latest -e SYNCHOST=$OLDURL)
            $ISINIT && NEWCID=$(docker run -d -p $NEWPORT:8080 $IMAGE_ID:latest)

            # ... here we are waiting for the sync to happen.
            # How long does that take? 1 second?
            sleep 1

            # Regex the new URL to ...?
            sed -ri "s/(.*?proxy_pass http\:\/\/)(.+?)\:([[:digit:]]+)(.*)/\1$NEWCID\:$NEWPORT\4/" $NGINX_CONFIG_PATH

            # --------------------------------------------------------

            # Reload the nginx container, refer to wiki.
            docker exec infrastructure_nginx /etc/init.d/nginx reload

            # ----------------------------------------------------
            # STOP THE OLD CONTAINER (if it exists)

            # ISINIT is false => stop old container #
            # ISINIT is true => there was never a container present, just pass through #
            $ISINIT || docker container stop $OLDCID
            $ISINIT || docker container rm $OLDCID
            $ISINIT || docker image rm $OLDIMGID

            # ----------------------------------------------------

            # Log out of registry
            docker logout ghcr.io

          # IP address of the MWN server
          host: 131.159.38.52

          # Username for authentication
          user: ubuntu

          # Port number of the server
          port: 10010

          # String that contains a private key, stored on JASS-2021 secrets (OpenSSH format)
          key: ${{ secrets.TUM_RBP_1_SECRET }}
