# build-and-test.yml
# Date started: 30th March 2021
# Date of last update: 31st March 2021

# Purpose:
# Attempts to deploy smart-infrastructure codebase to TUM's Duckie-Town LIFX
# bulbs on push/pull-request to trunk

# By: Ameena Hassan and Julian Christl

# Shout outs to: 
# Paul Schmiedmayer
# Hialus && He Xiaoning

# Developed also by discussions with:
# Timor Morrien
# Ivan Procaccini

# Related documentation can be found at:
# - https://docs.docker.com/engine/reference/commandline/images/
# - https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/

#
# >> Ping Ameena if we forgot you!
#

name: Build and Test # We should make this more accurate, but later on.


# Specifically mentions when to trigger the pipeline #
on:
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk

# Used to store global variables, adapt as necessary. #
env:
  # The name of our Docker image to deploy
  IMAGE_NAME: jass-smart-infrastructure-webservice

# Jobs the pipeline is supposed to run #
jobs:
  
  # # Job # 1: #
  # test_build:   
  #   # Is used to install libsqlite3 and run any identified tests #
  #   name: Linux test build
    
  #   # No idea why we need this #
  #   container:
  #     image: swift:focal
  #   runs-on: ubuntu-latest
  #   # strategy:
  #   #   matrix:
  #   #     configuration: [debug] #, release 
  #   #                            # (commented out because we copied over from Paul's 
  #   #                            # ApodiniExample code)
    
  #   # libsqlite3 outputs warnings that it needs apt-utils, so preinstall apt-utils: #

  #   steps:

  #   - uses: actions/checkout@v2
    
  #   - name: Install apt-utils
  #     run: apt-get update -y && apt-get install -y apt-utils

  #   # Dependency #
  #   - name: Install libsqlite3
  #     run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
      
  #   - uses: actions/cache@v2
  #     # Caching to make subsequent deployment faster #
  #     with:
  #       path: .build
  #       key: ${{ runner.os }}-focal-spm-cache-${{ hashFiles('Package.resolved') }}
    
  #   # Commented out for now, as we only want to be able to run tests.
  #   # - name: Build
  #   #   if: matrix.configuration == 'release'
  #   #   run: swift build --configuration ${{ matrix.configuration }}
    
  #   - name: Check Swift version
  #     # ApodiniLIFX/lifx/main.swift demands swift ver >= 5.3.0
  #     run: swift --version

  #   - name: Build & Test # Should this just be named `Test`?
  #     # Not sure why it works, but it works.
  #     run: swift test --configuration debug --enable-test-discovery

  # Job # 3: #
  build_and_push_to_registry:
    # Only executed after codebase passes all tests #
    # needs: [test_build]

    # Build image and push to GitHub registry if on correct branch #
    name: Build and Push Docker Image # to GitHub Container Registry

    runs-on: ubuntu-latest
    
    # if this conditional fails, none of the steps are executed #
    if: github.ref == 'refs/heads/trunk'

    steps:

      - name: Install apt-utils
        run: sudo apt-get update -y && sudo apt-get install -y apt-utils

      - name: Check out the repo
        # First, ensure that we have the latest version of repo #
        uses: actions/checkout@v2

      - name: Build image
        # Build Docker image jass-smart-infrastructure-webservice:COMMIT_ID #
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log into registry
        # # Log on to GitHub Container Registry #
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        # Push image onto the registry #
        run: |
          # Creating the image_id we want
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase to follow convention of image_id
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # github.* is a context unique to GitHub Actions
          # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context

          # Strip .git/ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Finding the tag that triggered the workflow
          # Strip "v" prefix from tag name
          # [] - evaluates 'index' of booleans to true (1) or false (0) #
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          # Use Docker's `latest` tag convention
          [ "$VERSION" == "trunk" ] && VERSION=latest

          # Finally, for a sanity check/reference, print image_id and version #
          # This is always going to be ghcr.io/jass-2021/$IMAGE_NAME and latest #
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          # Tag the local Docker $IMAGE_NAME with personalised image_id and `latest` tag#
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION

          # Push the latest image to the registry!
          docker push $IMAGE_ID:$VERSION

      - name: Log out of registry
        run: docker logout ghcr.io 

  # Job # 5: #     ## DEPLOY ##
  deploy_to_raspberry:
    # Only executed once Docker image is successfully built and pushed to registry #
    needs: [build_and_push_to_registry] #test_build,
    

    # Move Docker image from Registry to RPi #
    name: Deploy Docker image to the Raspberry

    runs-on: ubuntu-latest

    # if head is not at trunk, fail before running the steps! #
    if: github.ref == 'refs/heads/trunk'

    steps:

      # Perform deployment via SSH
      - name: Deploy with SSH
        uses: fifsky/ssh-action@v0.0.5
        with:
          args: "-vvv" 
          # Command to execute on the remote server, i.e. another mess 
          command: |
            # cd into smart-infrastructure directory #
            cd ~/infrastructure

          # IP address of the MWN server
          host: 131.159.38.52
          
          # Username for authentication (provided by Paul)
          user: ubuntu

          # Port number of the server (provided by Paul)
          port: 10011  # Need to check that all projects are not using the same port! #

          # String that contains a private key, stored on JASS-2021 secrets (OpenSSH format)
          key: ${{ secrets.TUM_RBP_1_SECRET }}
      
