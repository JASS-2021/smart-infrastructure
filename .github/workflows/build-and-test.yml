# build-and-test.yml
# Date started: 30th March 2021
# Date of last update: 31st March 2021

# Purpose:
# Attempts to deploy smart-infrastructure codebase to TUM's Duckie-Town LIFX
# bulbs on push/pull-request to trunk

# By: Ameena Hassan and Julian Christl

# Shout outs to: 
# Paul Schmiedmayer
# Hialus && He Xiaoning

# Developed also by discussions with:
# Ivan Procaccini

# Related documentation can be found at:
# - https://docs.docker.com/engine/reference/commandline/images/
# - https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/

#
# >> Ping Ameena if we forgot you!
#

name: Build and Test # We should make this more accurate, but later on.


# Specifically mentions when to trigger the pipeline #
on:
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk

# Used to store global variables, adapt as necessary. #
env:
  # The name of our Docker image to deploy
  IMAGE_NAME: jass-smart-infrastructure-webservice

  # Truth value to check if credentials are secured yet: 
  CRED_SECURE: false


# Jobs the pipeline is supposed to run #
jobs:

  # Job # 1: #
  prereqs: 
    # Used for debugging, sanity checks, and installing apt-utils #
    name: Prerequisite install ~ apt-utils 
    runs-on: ubuntu-latest

    steps:
      # GitHub Action to fetch a shallow clone of various dependencies #
      - uses: actions/checkout@v2
  
      # Is currently not being used? We used this to fix (github.ref == ??) boolean bug #
      - name: Debug
        run: echo "${{ github.ref }}"
  
      # Dependency Alert : apt-utils #
      - name: Install apt-utils
        run: sudo apt-get update -y && sudo apt-get install -y apt-utils
  
  # Job # 2: #
  testing:   
    # Is used to install libsqlite3 and run any identified tests #
    name: Linux focal ${{ matrix.configuration }} test build
    
    # No idea why we need this #
    container:
      image: swift:focal
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [debug] #, release 
                               # (commented out because we copied over from Paul's 
                               # ApodiniExample code)
    
    # libsqlite3 outputs warnings that it needs apt-utils, so preinstall apt-utils: #
    needs: [prereqs]

    steps:

    # Dependency Alert : libsqlite3 #
    - name: Install libsqlite3
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
      
    - uses: actions/cache@v2
      # Caching to make subsequent deployment faster #
      with:
        path: .build
        key: ${{ runner.os }}-focal-spm-cache-${{ hashFiles('Package.resolved') }}
    
    - name: Check Swift version
      # ApodiniLIFX/lifx/main.swift demands swift ver >= 5.3.0
      run: swift --version
    
    # Commented out for now, as we only want to be able to run tests.
    # - name: Build
    #   if: matrix.configuration == 'release'
    #   run: swift build --configuration ${{ matrix.configuration }}

    - name: Build & Test # Should this just be named `Test`?
      # Not sure why it works, but it works.
      if: matrix.configuration == 'debug'
      run: swift test --configuration ${{ matrix.configuration }} --enable-test-discovery

  credentials_helper_set_up:
    name: Prevent password being exposed!
    runs-on: ubuntu-latest

    outputs:
      cred-secure: ${{ steps.run_cred_helper_sh.outputs.cred-secure }}

    steps:
      - name: Run sh script
        run: |
          chmod +x ./cred_helper.sh
          sudo ./cred_helper.sh
      - id: run_cred_helper_sh
        run: echo "::set-output name=cred-secure::true"

  # Job # 3: #
  build_and_push_to_registry:
    # Only executed after codebase passes all tests #
    needs: [testing, credentials_helper_set_up]

    # Build image and push to GitHub registry if on correct branch #
    name: Push Docker image to GitHub Container Registry

    runs-on: ubuntu-latest
    
    # if this conditional fails, none of the steps are executed #
    if: github.ref == 'refs/heads/trunk' &&  [${{ needs.credentials_helper_set_up.outputs.cred-secure }} == "true"]

    steps:
      - name: Check out the repo
        # First, ensure that we have the latest version of repo #
        uses: actions/checkout@v2

      - name: Build image
        # Build Docker image jass-smart-infrastructure-webservice:COMMIT_ID #
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log into registry
        # # Log on to GitHub Container Registry #
        # run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        run: sudo docker login ghcr.io -u ${{ github.actor }}

      - name: Push image
        # Push image onto the registry #
        run: |
          # Creating the image_id we want
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase to follow convention of image_id
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # github.* is a context unique to GitHub Actions
          # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context

          # Strip .git/ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Finding the tag that triggered the workflow
          # Strip "v" prefix from tag name
          # [] - evaluates 'index' of booleans to true (1) or false (0) #
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          # Use Docker's `latest` tag convention
          [ "$VERSION" == "trunk" ] && VERSION=latest

          # Finally, for a sanity check/reference, print image_id and version #
          # This is always going to be ghcr.io/jass-2021/$IMAGE_NAME and latest #
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          # Tag the local Docker $IMAGE_NAME with personalised image_id and `latest` tag#
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION

          # Push the latest image to the registry!
          docker push $IMAGE_ID:$VERSION

  # Job # 4: #
  join_the_vpn:
    # Once the Docker image is built and pushed, we need to connect to the VPN... #
    needs: [testing, build_and_push_to_registry]

    # As described by JP (github@jpbernius) in Munich.md, connect to VPN #
    name: Connect to the VPN, Steps 1-3.

    runs-on: ubuntu-latest

    steps:
      # As described by JP (github@jpbernius) in https://github.com/JASS-2021/JASS-2021/blob/trunk/Munich.md#github-action-tum-vpn-access

      # Step 1: Install vpnc
      - name: Install vpnc
        run: sudo apt-get install vpnc

      # Step 2: Configure LRZ VPN
      - name: Configure LRZ VPN
        run: |
          echo "${{ secrets.MWN_VPNC_CONFIG }}" > lrz.conf
          sudo mkdir -p /etc/vpnc
          sudo mv lrz.conf /etc/vpnc/
          sudo chmod 600 /etc/vpnc/lrz.conf

      # Step 3a: Connect to VPN 
      - name: Connect VPN
        run: sudo vpnc lrz
      
      # Step 3b: Test the connection
      - name: Ping sophos.lrz.de (only accessible inside MWN)
        id: vpn-test
        run: |
          ping -c 5 sophos.lrz.de
          echo "::set-output name=success::true"

  # Job # 5: #     ## DEPLOY ##
  deploy_to_raspberry:
    # Only executed once Docker image is successfully built and pushed to registry #
    # Wait until we have connected to MVN #
    needs: [testing, build_and_push_to_registry, join_the_vpn, credentials_helper_set_up]
    

    # Move Docker image from Registry to RPi #
    name: Deploy Docker image to the Raspberry

    runs-on: ubuntu-latest

    # if head is not at trunk, fail before running the steps! #
    if: github.ref == 'refs/heads/trunk'

    steps:
      # As described by JP (github@jpbernius) in https://github.com/JASS-2021/JASS-2021/blob/trunk/Munich.md#github-action-tum-vpn-access

      # We have already done steps 1-3.

      # Step 4: Perform deployment via SSH
      - name: Deploy with SSH
        if: ${{ needs.credentials_helper_set_up.outputs.cred-secure }}=='true'
        uses: fifsky/ssh-action@v0.0.5
        with:
          # Command to execute on the remote server, i.e. another mess 
          command: |
            # cd into smart-infrastructure directory #
            cd ~/infrastructure

            # log on into docker using github secrets #
            # echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            sudo docker login ghcr.io -u ${{ github.actor }}

            # set the version variable to the newest version #
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            # Sanity check that it is the trunk #
            echo VERSION=$VERSION
            
            REGISTRY_ADDR=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$VERSION

            # Change all uppercase to lowercase to follow convention of repository name
            REGISTRY_ADDR=$(echo $REGISTRY_ADDR | tr '[A-Z]' '[a-z]')

            # Pull the image out of where we stored it
            docker pull $REGISTRY_ADDR

            # -----------------------------------------------------

            # Store the old port and container_id to make sure we can find, stop and rm it later.
            PATH_TO_PUSH_TO="conf.d/nginx.conf"
            OLDPORT="$(sed -n 's/proxy_pass http\:\/\/?:(.+?)\:(.+?)/\1/p' $PATH_TO_PUSH_TO)"
            OLDCID="$(sed -n 's/proxy_pass http\:\/\/(.+?)\:(.+?)/\1/p' $PATH_TO_PUSH_TO)"
            
            # Initialise ISINIT as false.
            ISINIT=false
            # if container hasn't been set up yet, then OLDCID is just IP of localhost.#
            # and then we set ISINIT to true. #
            ["$OLDCID" == "127.0.0.1"] && ISINIT=true

            # Set the old url to be this:
            OLDURL="http://$OLDCID:$OLDPORT"
            # Set the old image to the id of the one container we can 
            # find on running docker inspect
            OLDIMGID=$(docker inspect --format='{{.Image}}' $OLDCID)

            # --------------------------------------------------------
            # CREATE THE NEW CONTAINER'S DETAILS:

            # New port is the one that is not the old port's 
            NEWPORT=($OLDPORT=="8091"?"8092":"8091")
            # New container id is whatever id we get when running the newest image, 
            # after syncing up with current container.
            NEWCID=$(docker run -d -p $NEWPORT:8080 $IMAGE_NAME:$VERSION -e SYNCHOST=$OLDURL)

            # ... here we are waiting for the sync to happen. 
            # How long does that take? 1 second?
            sleep 1

            # Regex the new URL to ...?
            sed -r -i -e "s/(proxy_pass http://)(.+?):(.+?)/\1$NEWCID\:$NEWPORT/" $PATH_TO_PUSH_TO

            # --------------------------------------------------------

            # Reload the nginx container, refer to wiki.
            docker exec infrastructure_nginx /etc/init.d/nginx reload
            
            # ----------------------------------------------------
            # STOP THE OLD CONTAINER (if it exists)

            # ISINIT is false => stop old container #
            # ISINIT is true => there was never a container present, just pass through #
            $ISINIT || docker container stop $OLDCID
            $ISINIT || docker container rm $OLDCID
            $ISINIT || docker image rm $OLDIMGID

            # ---------------------------------------------------- END ---

          # IP address of the MWN server
          host: 131.159.38.52
          
          # Username for authentication (provided by Paul)
          user: ubuntu

          # Port number of the server (provided by Paul)
          port: 10011  # Need to check that all projects are not using the same port! #

          # String that contains a private key, stored on JASS-2021 secrets (OpenSSH format)
          key: ${{ secrets.TUM_RBP_1_SECRET }}

  # Job # 6: #     ## Disconnect when we are done ##
  disconnect_from_vpn: 

    # Only disconnect AFTER we have joined the VPN and tried to deploy #
    needs: [join_the_vpn, deploy_to_raspberry]

    if: always() # This will ensure we disconnect even if deploy_to_raspberry fails #

    # Step 5: #
    name: Disconnect from the VPN either way

    runs-on: ubuntu-latest

    steps:
    
      # Check that the connection was made, store truth value of success #
      - name: Ping sophos.lrz.de (only accessible inside MWN)
        id: vpn-test
        run: |
          ping -c 5 sophos.lrz.de
          echo "::set-output name=success::true"

      # Step 5: Disconnect VPN regardless Docker image pushed #
      - name: Disconnect VPN
        if: ${{ always() && (steps.vpn-test.outputs.success == 'true') }}
        run: |
          sudo vpnc-disconnect
          sudo rm /etc/vpnc/lrz.conf
